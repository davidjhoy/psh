import Head from 'next/head'
import CityPage from '../components/CityPage';
import CityButton from '../components/CityButton';
import {useRouter} from 'next/router';
import styles from '../styles/Home.module.scss'
import { useEffect, useState } from 'react';
import Snow from '../components/Confetti';

  
export default function Explore() {
  const [renderCityPage, setRenderCityPage] = useState(false);
  const [exploreEvents, setExploreEvents] = useState(""); 
  // const [eventsByCity, setEventsByCity] = useState({});
  // const [cityToCoordinateArray, setCityToCoordinateArray] = useState([]);
  const [events, setEvents] = useState();
  const [cities, setCities] = useState();
  const [isLoading, setIsLoading] = useState(true);
  const {query} = useRouter();
  const router = useRouter();
 
  useEffect(()=>{
        router.replace({
         query: {
         c: "popular",
         t: "",
         p: "1",
         city: ""}
     });

  //  fetch('/v1/events')
  //  .then((res) => res.json())
  //  .then((json) => {
  //      handleEvents(json)
      
  //  })
  //  .then(()=> constructEventObject())
  //  .then(() => setIsLoading(false))
  //  .catch(error => {
  //      console.log(error)
   
  //  })
  
    fetch('/cityEvents')
    .then((res) => res.json())
    .then((json)=> handleEvents(json))
    .then(()=> setCities(Object.keys(events)))
    .then(()=>setIsLoading(false))
    .catch(error => {console.log(error)})
  
 }
,[])


  const handleEvents = (events) =>{
      setEvents(events)
      

      // setCities(events.keys())
      // console.log(events)
  //     let coordinateArray = events.map((event)=>{
  //       const Lat = event.location.coordinates[1]
  //       const Long = event.location.coordinates[0]
  //       return [Lat, Long]
  //     })
  //     let uniqueCoordinates = filterEventCoordinates(coordinateArray)
  //     fetchCityNamesFromUniqueCoordinates(uniqueCoordinates)
      
  }

  // const filterEventCoordinates = (coordinateArray) => {
   
  //     return( Array.from(
  //       new Map(coordinateArray.map((c) => [c.join(), c])).values()
  //     ))
  // }

  // const fetchCityNamesFromUniqueCoordinates = (uniqueCoordinates) => {

  //     const requestOptions = {
  //       method: 'GET',
  //     };
  //     // setCityToCoordinateArray([])
  //     uniqueCoordinates.forEach((coordinate, index) => {
  //       //Iterate over each unique coordinate and make a fetch for the city name 
  //    fetch(`https://api.geoapify.com/v1/geocode/reverse?lat=${coordinate[0]}&lon=${coordinate[1]}&apiKey=${process.env.NEXT_PUBLIC_GEOCODE_API}`, requestOptions)
  //         .then(response => response.json())
  //         .then(result => {
  //           const city = result.features[0].properties.city
  //           setCities(cities => new Set([...cities, city]))
            
  //           //Rather than make a fetch for each event, I will create an array that matches each unique coordinate to a city
  //           // setCityToCoordinateArray(cityToCoordinateArray => [...cityToCoordinateArray, [coordinate[1], coordinate[0], city]])
           
            
  //         })
  //         .catch(error => console.log('error', error))
          
  //     })

  // }

  const renderCities = () =>{
   
   
    let cityArr = [...new Set(cities)]
    if (cityArr.length > 0){
      cityArr.push("Near Me")
    }
    return (
        //Something I learned doing this, map function provides an index value
        cityArr.map((city, index)=>{
        
        let handleClick = () => {router.push({query: {
          c: "popular",
         t: "",
         p: "1",
         city: city
        }})
        setRenderCityPage(!renderCityPage)
      }
          return(
            //So I can use
            <CityButton text = {city} childNumber = {index} key = {city} handleClick = {handleClick}/>
            
          )
        })
    )
  }
console.log(isLoading)


  return (
    <>  
    
    {renderCityPage ? 
    
    <CityPage togglePage = {setRenderCityPage} pageState = {renderCityPage} cityEvents = {events}/>
    :

    <div className={styles.container}>
      <Snow />
      <Head>
        <title>wtw?</title>
        <meta name="plz hr me" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <div className = {styles.CityClassContainer}>
          <div className = {styles.CityHeader}> WHERE ARE YOU LOOKING FOR EXPERIENCES?</div>
          <div className = {styles.CityListWrap}>
         
            {isLoading ? <div> Loading</div>   : renderCities(cities)}
          
          </div>
        </div>
    </div>

    
    }
    </>
  )
}