import Head from 'next/head'
import Image from 'next/image';
import CityButton from '../components/CityButton';
import {useRouter} from 'next/router';
import styles from '../styles/Home.module.scss'
import { useEffect, useState } from 'react';



  
export default function Explore() {
  const [events, setEvents] = useState(""); 
  const [coordinates, setCoordinates] = useState([]);
  const [cities, setCities] = useState(new Set());
  const [isLoading, setIsLoading] = useState(true);

 
  //Use Effect Will Grab the Cities and store in state. Then we grab cities and render CityButton componenets for each. 
    const router = useRouter();
    // useEffect(()=>{
    //     router.replace({
    //         query: {
    //         c: "popular",
    //         t: "",
    //         p: "1",
    //         city: ""}
    //     });
    // })

  const handleEvents = (events) =>{

      setCities([])
      setEvents(events)
      let coordinateArray = events.map((event)=>{
        const Lat = event.location.coordinates[1]
        const Long = event.location.coordinates[0]
        

        return [Lat, Long]
       
      })

      let uniqueCoordinates = filterEventCoordinates(coordinateArray)
      fetchCityNamesFromUniqueCoordinates(uniqueCoordinates)
      
  }


  const filterEventCoordinates = (coordinateArray) => {
   
      return( Array.from(
        new Map(coordinateArray.map((c) => [c.join(), c])).values()

      ))
  }

  const fetchCityNamesFromUniqueCoordinates = (uniqueCoordinates) => {

      const requestOptions = {
        method: 'GET',
      };

      uniqueCoordinates.forEach((coordinate) => {
        //Iterate over each unique coordinate and make a fetch for the city name 
        fetch(`https://api.geoapify.com/v1/geocode/reverse?lat=${coordinate[0]}&lon=${coordinate[1]}&apiKey=${process.env.NEXT_PUBLIC_GEOCODE_API}`, requestOptions)
          .then(response => response.json())
          .then(result => {
            console.log('fetch')
            const city = result.features[0].properties.city
            setCities(cities => new Set([...cities, city]))
            
          })
          .catch(error => console.log('error', error))
          
      })
  }

  console.log(cities)

  function renderCities (cities){
    
    //Can't map over a set so I need to convert the cities Set into an array. 
    let cityArr = [...cities];
    if (cityArr.length > 0){
      cityArr.push("Near Me")
    }
    

   
    return (
        //Something I learned doing this, map function provides an index value
        cityArr.map((city, index)=>{
          
          return(
            //So I can use
            <CityButton text = {city} childNumber = {index} key = {city} />
            
          )
          
         
        })
        
        
        
    )
        

 
  }


 
 
  useEffect(()=>{
      
      setEvents("")
      fetch('/v1/events')
      .then((res) => res.json())
      .then((json) => {
          handleEvents(json)
         
      })
      .then(() => setIsLoading(false))
      
      
      .catch(error => {
          console.log(error)
      
      })
    }
      

  ,[])
  
  return (
    <div className={styles.container}>
      <Head>
        <title>wtw?</title>
        <meta name="plz hr me" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


   
        <div className = {styles.CityClassContainer}>
          <div className = {styles.CityHeader}> WHERE ARE YOU LOOKING FOR EXPERIENCES?</div>
          <div className = {styles.CityListWrap}>
         
            {isLoading ? <div> Loading</div>   : renderCities(cities)}
          
          </div>
        </div>
    </div>
  )
}